// Generated by gencpp from file custom_msg_pkg/first_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PKG_MESSAGE_FIRST_MSG_H
#define CUSTOM_MSG_PKG_MESSAGE_FIRST_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg_pkg
{
template <class ContainerAllocator>
struct first_msg_
{
  typedef first_msg_<ContainerAllocator> Type;

  first_msg_()
    : start_time()
    , msg_seq(0)
    , original_num(0)  {
    }
  first_msg_(const ContainerAllocator& _alloc)
    : start_time()
    , msg_seq(0)
    , original_num(0)  {
  (void)_alloc;
    }



   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef uint16_t _msg_seq_type;
  _msg_seq_type msg_seq;

   typedef uint16_t _original_num_type;
  _original_num_type original_num;





  typedef boost::shared_ptr< ::custom_msg_pkg::first_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_pkg::first_msg_<ContainerAllocator> const> ConstPtr;

}; // struct first_msg_

typedef ::custom_msg_pkg::first_msg_<std::allocator<void> > first_msg;

typedef boost::shared_ptr< ::custom_msg_pkg::first_msg > first_msgPtr;
typedef boost::shared_ptr< ::custom_msg_pkg::first_msg const> first_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_pkg::first_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_pkg::first_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_pkg::first_msg_<ContainerAllocator1> & lhs, const ::custom_msg_pkg::first_msg_<ContainerAllocator2> & rhs)
{
  return lhs.start_time == rhs.start_time &&
    lhs.msg_seq == rhs.msg_seq &&
    lhs.original_num == rhs.original_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_pkg::first_msg_<ContainerAllocator1> & lhs, const ::custom_msg_pkg::first_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_pkg::first_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_pkg::first_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_pkg::first_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d5888a5a4bca89c6d6a476ac8a88a1a";
  }

  static const char* value(const ::custom_msg_pkg::first_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d5888a5a4bca89cULL;
  static const uint64_t static_value2 = 0x6d6a476ac8a88a1aULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_pkg/first_msg";
  }

  static const char* value(const ::custom_msg_pkg::first_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time start_time\n"
"uint16 msg_seq\n"
"uint16 original_num\n"
;
  }

  static const char* value(const ::custom_msg_pkg::first_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.msg_seq);
      stream.next(m.original_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct first_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_pkg::first_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_pkg::first_msg_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "msg_seq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.msg_seq);
    s << indent << "original_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.original_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PKG_MESSAGE_FIRST_MSG_H
