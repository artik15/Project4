// Generated by gencpp from file manager/SpeedControl.msg
// DO NOT EDIT!


#ifndef MANAGER_MESSAGE_SPEEDCONTROL_H
#define MANAGER_MESSAGE_SPEEDCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manager
{
template <class ContainerAllocator>
struct SpeedControl_
{
  typedef SpeedControl_<ContainerAllocator> Type;

  SpeedControl_()
    : enabled(false)
    , speed(0.0)  {
    }
  SpeedControl_(const ContainerAllocator& _alloc)
    : enabled(false)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::manager::SpeedControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manager::SpeedControl_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedControl_

typedef ::manager::SpeedControl_<std::allocator<void> > SpeedControl;

typedef boost::shared_ptr< ::manager::SpeedControl > SpeedControlPtr;
typedef boost::shared_ptr< ::manager::SpeedControl const> SpeedControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manager::SpeedControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manager::SpeedControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manager::SpeedControl_<ContainerAllocator1> & lhs, const ::manager::SpeedControl_<ContainerAllocator2> & rhs)
{
  return lhs.enabled == rhs.enabled &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manager::SpeedControl_<ContainerAllocator1> & lhs, const ::manager::SpeedControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::manager::SpeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manager::SpeedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manager::SpeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manager::SpeedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manager::SpeedControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manager::SpeedControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manager::SpeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "959738decaba41841790fb595d10b1d5";
  }

  static const char* value(const ::manager::SpeedControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x959738decaba4184ULL;
  static const uint64_t static_value2 = 0x1790fb595d10b1d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::manager::SpeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manager/SpeedControl";
  }

  static const char* value(const ::manager::SpeedControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manager::SpeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enabled\n"
"float32 speed\n"
;
  }

  static const char* value(const ::manager::SpeedControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manager::SpeedControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabled);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manager::SpeedControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manager::SpeedControl_<ContainerAllocator>& v)
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANAGER_MESSAGE_SPEEDCONTROL_H
